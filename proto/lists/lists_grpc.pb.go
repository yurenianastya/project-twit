// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lists

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ListServiceClient is the client API for ListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListServiceClient interface {
	CreateCustomList(ctx context.Context, in *ListName, opts ...grpc.CallOption) (*ListResponse, error)
	AddUserToCustomList(ctx context.Context, in *User, opts ...grpc.CallOption) (*ListResponse, error)
	RemoveUserFromCustomList(ctx context.Context, in *User, opts ...grpc.CallOption) (*ListResponse, error)
	GetListUsers(ctx context.Context, in *ListUUID, opts ...grpc.CallOption) (*ListResponse, error)
	GetUsersTwitsFromCustomList(ctx context.Context, in *ListUUID, opts ...grpc.CallOption) (ListService_GetUsersTwitsFromCustomListClient, error)
	DeleteCustomList(ctx context.Context, in *ListUUID, opts ...grpc.CallOption) (*ListResponse, error)
}

type listServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewListServiceClient(cc grpc.ClientConnInterface) ListServiceClient {
	return &listServiceClient{cc}
}

func (c *listServiceClient) CreateCustomList(ctx context.Context, in *ListName, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/main.ListService/createCustomList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) AddUserToCustomList(ctx context.Context, in *User, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/main.ListService/addUserToCustomList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) RemoveUserFromCustomList(ctx context.Context, in *User, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/main.ListService/removeUserFromCustomList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) GetListUsers(ctx context.Context, in *ListUUID, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/main.ListService/getListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) GetUsersTwitsFromCustomList(ctx context.Context, in *ListUUID, opts ...grpc.CallOption) (ListService_GetUsersTwitsFromCustomListClient, error) {
	stream, err := c.cc.NewStream(ctx, &ListService_ServiceDesc.Streams[0], "/main.ListService/getUsersTwitsFromCustomList", opts...)
	if err != nil {
		return nil, err
	}
	x := &listServiceGetUsersTwitsFromCustomListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ListService_GetUsersTwitsFromCustomListClient interface {
	Recv() (*ListTwit, error)
	grpc.ClientStream
}

type listServiceGetUsersTwitsFromCustomListClient struct {
	grpc.ClientStream
}

func (x *listServiceGetUsersTwitsFromCustomListClient) Recv() (*ListTwit, error) {
	m := new(ListTwit)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *listServiceClient) DeleteCustomList(ctx context.Context, in *ListUUID, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/main.ListService/deleteCustomList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListServiceServer is the server API for ListService service.
// All implementations must embed UnimplementedListServiceServer
// for forward compatibility
type ListServiceServer interface {
	CreateCustomList(context.Context, *ListName) (*ListResponse, error)
	AddUserToCustomList(context.Context, *User) (*ListResponse, error)
	RemoveUserFromCustomList(context.Context, *User) (*ListResponse, error)
	GetListUsers(context.Context, *ListUUID) (*ListResponse, error)
	GetUsersTwitsFromCustomList(*ListUUID, ListService_GetUsersTwitsFromCustomListServer) error
	DeleteCustomList(context.Context, *ListUUID) (*ListResponse, error)
	mustEmbedUnimplementedListServiceServer()
}

// UnimplementedListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedListServiceServer struct {
}

func (UnimplementedListServiceServer) CreateCustomList(context.Context, *ListName) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomList not implemented")
}
func (UnimplementedListServiceServer) AddUserToCustomList(context.Context, *User) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToCustomList not implemented")
}
func (UnimplementedListServiceServer) RemoveUserFromCustomList(context.Context, *User) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromCustomList not implemented")
}
func (UnimplementedListServiceServer) GetListUsers(context.Context, *ListUUID) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListUsers not implemented")
}
func (UnimplementedListServiceServer) GetUsersTwitsFromCustomList(*ListUUID, ListService_GetUsersTwitsFromCustomListServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUsersTwitsFromCustomList not implemented")
}
func (UnimplementedListServiceServer) DeleteCustomList(context.Context, *ListUUID) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomList not implemented")
}
func (UnimplementedListServiceServer) mustEmbedUnimplementedListServiceServer() {}

// UnsafeListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListServiceServer will
// result in compilation errors.
type UnsafeListServiceServer interface {
	mustEmbedUnimplementedListServiceServer()
}

func RegisterListServiceServer(s grpc.ServiceRegistrar, srv ListServiceServer) {
	s.RegisterService(&ListService_ServiceDesc, srv)
}

func _ListService_CreateCustomList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).CreateCustomList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ListService/createCustomList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).CreateCustomList(ctx, req.(*ListName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_AddUserToCustomList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).AddUserToCustomList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ListService/addUserToCustomList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).AddUserToCustomList(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_RemoveUserFromCustomList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).RemoveUserFromCustomList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ListService/removeUserFromCustomList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).RemoveUserFromCustomList(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_GetListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).GetListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ListService/getListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).GetListUsers(ctx, req.(*ListUUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_GetUsersTwitsFromCustomList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListUUID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ListServiceServer).GetUsersTwitsFromCustomList(m, &listServiceGetUsersTwitsFromCustomListServer{stream})
}

type ListService_GetUsersTwitsFromCustomListServer interface {
	Send(*ListTwit) error
	grpc.ServerStream
}

type listServiceGetUsersTwitsFromCustomListServer struct {
	grpc.ServerStream
}

func (x *listServiceGetUsersTwitsFromCustomListServer) Send(m *ListTwit) error {
	return x.ServerStream.SendMsg(m)
}

func _ListService_DeleteCustomList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).DeleteCustomList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ListService/deleteCustomList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).DeleteCustomList(ctx, req.(*ListUUID))
	}
	return interceptor(ctx, in, info, handler)
}

// ListService_ServiceDesc is the grpc.ServiceDesc for ListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.ListService",
	HandlerType: (*ListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createCustomList",
			Handler:    _ListService_CreateCustomList_Handler,
		},
		{
			MethodName: "addUserToCustomList",
			Handler:    _ListService_AddUserToCustomList_Handler,
		},
		{
			MethodName: "removeUserFromCustomList",
			Handler:    _ListService_RemoveUserFromCustomList_Handler,
		},
		{
			MethodName: "getListUsers",
			Handler:    _ListService_GetListUsers_Handler,
		},
		{
			MethodName: "deleteCustomList",
			Handler:    _ListService_DeleteCustomList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getUsersTwitsFromCustomList",
			Handler:       _ListService_GetUsersTwitsFromCustomList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lists.proto",
}
