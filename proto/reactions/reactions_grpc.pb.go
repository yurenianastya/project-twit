// Code generated by protoc-gen-go-methods. DO NOT EDIT.

package reactions

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LikeServiceClient is the client API for LikeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LikeServiceClient interface {
	GetTwitLikes(ctx context.Context, in *ReactionUUID, opts ...grpc.CallOption) (*Like, error)
	LikeTwit(ctx context.Context, in *ReactionUUID, opts ...grpc.CallOption) (*ResponseReaction, error)
	UnlikeTwit(ctx context.Context, in *ReactionUUID, opts ...grpc.CallOption) (*ResponseReaction, error)
}

type likeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLikeServiceClient(cc grpc.ClientConnInterface) LikeServiceClient {
	return &likeServiceClient{cc}
}

func (c *likeServiceClient) GetTwitLikes(ctx context.Context, in *ReactionUUID, opts ...grpc.CallOption) (*Like, error) {
	out := new(Like)
	err := c.cc.Invoke(ctx, "/main.LikeService/getTwitLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeServiceClient) LikeTwit(ctx context.Context, in *ReactionUUID, opts ...grpc.CallOption) (*ResponseReaction, error) {
	out := new(ResponseReaction)
	err := c.cc.Invoke(ctx, "/main.LikeService/likeTwit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeServiceClient) UnlikeTwit(ctx context.Context, in *ReactionUUID, opts ...grpc.CallOption) (*ResponseReaction, error) {
	out := new(ResponseReaction)
	err := c.cc.Invoke(ctx, "/main.LikeService/unlikeTwit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LikeServiceServer is the server API for LikeService service.
// All implementations must embed UnimplementedLikeServiceServer
// for forward compatibility
type LikeServiceServer interface {
	GetTwitLikes(context.Context, *ReactionUUID) (*Like, error)
	LikeTwit(context.Context, *ReactionUUID) (*ResponseReaction, error)
	UnlikeTwit(context.Context, *ReactionUUID) (*ResponseReaction, error)
	mustEmbedUnimplementedLikeServiceServer()
}

// UnimplementedLikeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLikeServiceServer struct {
}

func (UnimplementedLikeServiceServer) GetTwitLikes(context.Context, *ReactionUUID) (*Like, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTwitLikes not implemented")
}
func (UnimplementedLikeServiceServer) LikeTwit(context.Context, *ReactionUUID) (*ResponseReaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeTwit not implemented")
}
func (UnimplementedLikeServiceServer) UnlikeTwit(context.Context, *ReactionUUID) (*ResponseReaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlikeTwit not implemented")
}
func (UnimplementedLikeServiceServer) mustEmbedUnimplementedLikeServiceServer() {}

// UnsafeLikeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LikeServiceServer will
// result in compilation errors.
type UnsafeLikeServiceServer interface {
	mustEmbedUnimplementedLikeServiceServer()
}

func RegisterLikeServiceServer(s grpc.ServiceRegistrar, srv LikeServiceServer) {
	s.RegisterService(&LikeService_ServiceDesc, srv)
}

func _LikeService_GetTwitLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactionUUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).GetTwitLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.LikeService/getTwitLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).GetTwitLikes(ctx, req.(*ReactionUUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikeService_LikeTwit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactionUUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).LikeTwit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.LikeService/likeTwit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).LikeTwit(ctx, req.(*ReactionUUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikeService_UnlikeTwit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactionUUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).UnlikeTwit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.LikeService/unlikeTwit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).UnlikeTwit(ctx, req.(*ReactionUUID))
	}
	return interceptor(ctx, in, info, handler)
}

// LikeService_ServiceDesc is the grpc.ServiceDesc for LikeService service.
// It's only intended for direct use with methods.RegisterService,
// and not to be introspected or modified (even as a copy)
var LikeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.LikeService",
	HandlerType: (*LikeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getTwitLikes",
			Handler:    _LikeService_GetTwitLikes_Handler,
		},
		{
			MethodName: "likeTwit",
			Handler:    _LikeService_LikeTwit_Handler,
		},
		{
			MethodName: "unlikeTwit",
			Handler:    _LikeService_UnlikeTwit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/reactions/reactions.proto",
}

// RetwitServiceClient is the client API for RetwitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RetwitServiceClient interface {
	GetTwitRetwits(ctx context.Context, in *ReactionUUID, opts ...grpc.CallOption) (*Retwit, error)
	RetwitTwit(ctx context.Context, in *ReactionUUID, opts ...grpc.CallOption) (*ResponseReaction, error)
	UnretwitTwit(ctx context.Context, in *ReactionUUID, opts ...grpc.CallOption) (*ResponseReaction, error)
}

type retwitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRetwitServiceClient(cc grpc.ClientConnInterface) RetwitServiceClient {
	return &retwitServiceClient{cc}
}

func (c *retwitServiceClient) GetTwitRetwits(ctx context.Context, in *ReactionUUID, opts ...grpc.CallOption) (*Retwit, error) {
	out := new(Retwit)
	err := c.cc.Invoke(ctx, "/main.RetwitService/getTwitRetwits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retwitServiceClient) RetwitTwit(ctx context.Context, in *ReactionUUID, opts ...grpc.CallOption) (*ResponseReaction, error) {
	out := new(ResponseReaction)
	err := c.cc.Invoke(ctx, "/main.RetwitService/retwitTwit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retwitServiceClient) UnretwitTwit(ctx context.Context, in *ReactionUUID, opts ...grpc.CallOption) (*ResponseReaction, error) {
	out := new(ResponseReaction)
	err := c.cc.Invoke(ctx, "/main.RetwitService/unretwitTwit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RetwitServiceServer is the server API for RetwitService service.
// All implementations must embed UnimplementedRetwitServiceServer
// for forward compatibility
type RetwitServiceServer interface {
	GetTwitRetwits(context.Context, *ReactionUUID) (*Retwit, error)
	RetwitTwit(context.Context, *ReactionUUID) (*ResponseReaction, error)
	UnretwitTwit(context.Context, *ReactionUUID) (*ResponseReaction, error)
	mustEmbedUnimplementedRetwitServiceServer()
}

// UnimplementedRetwitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRetwitServiceServer struct {
}

func (UnimplementedRetwitServiceServer) GetTwitRetwits(context.Context, *ReactionUUID) (*Retwit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTwitRetwits not implemented")
}
func (UnimplementedRetwitServiceServer) RetwitTwit(context.Context, *ReactionUUID) (*ResponseReaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetwitTwit not implemented")
}
func (UnimplementedRetwitServiceServer) UnretwitTwit(context.Context, *ReactionUUID) (*ResponseReaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnretwitTwit not implemented")
}
func (UnimplementedRetwitServiceServer) mustEmbedUnimplementedRetwitServiceServer() {}

// UnsafeRetwitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RetwitServiceServer will
// result in compilation errors.
type UnsafeRetwitServiceServer interface {
	mustEmbedUnimplementedRetwitServiceServer()
}

func RegisterRetwitServiceServer(s grpc.ServiceRegistrar, srv RetwitServiceServer) {
	s.RegisterService(&RetwitService_ServiceDesc, srv)
}

func _RetwitService_GetTwitRetwits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactionUUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetwitServiceServer).GetTwitRetwits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.RetwitService/getTwitRetwits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetwitServiceServer).GetTwitRetwits(ctx, req.(*ReactionUUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RetwitService_RetwitTwit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactionUUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetwitServiceServer).RetwitTwit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.RetwitService/retwitTwit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetwitServiceServer).RetwitTwit(ctx, req.(*ReactionUUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RetwitService_UnretwitTwit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactionUUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetwitServiceServer).UnretwitTwit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.RetwitService/unretwitTwit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetwitServiceServer).UnretwitTwit(ctx, req.(*ReactionUUID))
	}
	return interceptor(ctx, in, info, handler)
}

// RetwitService_ServiceDesc is the grpc.ServiceDesc for RetwitService service.
// It's only intended for direct use with methods.RegisterService,
// and not to be introspected or modified (even as a copy)
var RetwitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.RetwitService",
	HandlerType: (*RetwitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getTwitRetwits",
			Handler:    _RetwitService_GetTwitRetwits_Handler,
		},
		{
			MethodName: "retwitTwit",
			Handler:    _RetwitService_RetwitTwit_Handler,
		},
		{
			MethodName: "unretwitTwit",
			Handler:    _RetwitService_UnretwitTwit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/reactions/reactions.proto",
}
