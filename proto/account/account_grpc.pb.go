// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package account

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	GetLikedTwits(ctx context.Context, in *AccountUUID, opts ...grpc.CallOption) (AccountService_GetLikedTwitsClient, error)
	GetRetwitedTwits(ctx context.Context, in *AccountUUID, opts ...grpc.CallOption) (AccountService_GetRetwitedTwitsClient, error)
	GetUserTwits(ctx context.Context, in *AccountUUID, opts ...grpc.CallOption) (AccountService_GetUserTwitsClient, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) GetLikedTwits(ctx context.Context, in *AccountUUID, opts ...grpc.CallOption) (AccountService_GetLikedTwitsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccountService_ServiceDesc.Streams[0], "/main.AccountService/getLikedTwits", opts...)
	if err != nil {
		return nil, err
	}
	x := &accountServiceGetLikedTwitsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccountService_GetLikedTwitsClient interface {
	Recv() (*AccountTwit, error)
	grpc.ClientStream
}

type accountServiceGetLikedTwitsClient struct {
	grpc.ClientStream
}

func (x *accountServiceGetLikedTwitsClient) Recv() (*AccountTwit, error) {
	m := new(AccountTwit)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accountServiceClient) GetRetwitedTwits(ctx context.Context, in *AccountUUID, opts ...grpc.CallOption) (AccountService_GetRetwitedTwitsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccountService_ServiceDesc.Streams[1], "/main.AccountService/getRetwitedTwits", opts...)
	if err != nil {
		return nil, err
	}
	x := &accountServiceGetRetwitedTwitsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccountService_GetRetwitedTwitsClient interface {
	Recv() (*AccountTwit, error)
	grpc.ClientStream
}

type accountServiceGetRetwitedTwitsClient struct {
	grpc.ClientStream
}

func (x *accountServiceGetRetwitedTwitsClient) Recv() (*AccountTwit, error) {
	m := new(AccountTwit)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accountServiceClient) GetUserTwits(ctx context.Context, in *AccountUUID, opts ...grpc.CallOption) (AccountService_GetUserTwitsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccountService_ServiceDesc.Streams[2], "/main.AccountService/getUserTwits", opts...)
	if err != nil {
		return nil, err
	}
	x := &accountServiceGetUserTwitsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccountService_GetUserTwitsClient interface {
	Recv() (*AccountTwit, error)
	grpc.ClientStream
}

type accountServiceGetUserTwitsClient struct {
	grpc.ClientStream
}

func (x *accountServiceGetUserTwitsClient) Recv() (*AccountTwit, error) {
	m := new(AccountTwit)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility
type AccountServiceServer interface {
	GetLikedTwits(*AccountUUID, AccountService_GetLikedTwitsServer) error
	GetRetwitedTwits(*AccountUUID, AccountService_GetRetwitedTwitsServer) error
	GetUserTwits(*AccountUUID, AccountService_GetUserTwitsServer) error
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (UnimplementedAccountServiceServer) GetLikedTwits(*AccountUUID, AccountService_GetLikedTwitsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLikedTwits not implemented")
}
func (UnimplementedAccountServiceServer) GetRetwitedTwits(*AccountUUID, AccountService_GetRetwitedTwitsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRetwitedTwits not implemented")
}
func (UnimplementedAccountServiceServer) GetUserTwits(*AccountUUID, AccountService_GetUserTwitsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserTwits not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_GetLikedTwits_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountUUID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccountServiceServer).GetLikedTwits(m, &accountServiceGetLikedTwitsServer{stream})
}

type AccountService_GetLikedTwitsServer interface {
	Send(*AccountTwit) error
	grpc.ServerStream
}

type accountServiceGetLikedTwitsServer struct {
	grpc.ServerStream
}

func (x *accountServiceGetLikedTwitsServer) Send(m *AccountTwit) error {
	return x.ServerStream.SendMsg(m)
}

func _AccountService_GetRetwitedTwits_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountUUID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccountServiceServer).GetRetwitedTwits(m, &accountServiceGetRetwitedTwitsServer{stream})
}

type AccountService_GetRetwitedTwitsServer interface {
	Send(*AccountTwit) error
	grpc.ServerStream
}

type accountServiceGetRetwitedTwitsServer struct {
	grpc.ServerStream
}

func (x *accountServiceGetRetwitedTwitsServer) Send(m *AccountTwit) error {
	return x.ServerStream.SendMsg(m)
}

func _AccountService_GetUserTwits_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountUUID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccountServiceServer).GetUserTwits(m, &accountServiceGetUserTwitsServer{stream})
}

type AccountService_GetUserTwitsServer interface {
	Send(*AccountTwit) error
	grpc.ServerStream
}

type accountServiceGetUserTwitsServer struct {
	grpc.ServerStream
}

func (x *accountServiceGetUserTwitsServer) Send(m *AccountTwit) error {
	return x.ServerStream.SendMsg(m)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getLikedTwits",
			Handler:       _AccountService_GetLikedTwits_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getRetwitedTwits",
			Handler:       _AccountService_GetRetwitedTwits_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getUserTwits",
			Handler:       _AccountService_GetUserTwits_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "account.proto",
}
